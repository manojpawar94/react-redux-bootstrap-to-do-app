{"version":3,"sources":["constants/TodoConstant.js","containers/AddTodoItem.js","components/AddTodoItemComponent.js","actions/TodoActions.js","components/TodoItemComponent.js","containers/TodoItem.js","components/PaginationComponent.js","components/TodoItemListComponent.js","containers/TodoItemList.js","components/LinkComponent.js","containers/FilterLink.js","template/FilterLinkTemplate.js","App.js","serviceWorker.js","reducers/todosReducer.js","reducers/visibilityFilterReducer.js","reducers/index.js","index.js"],"names":["TodoActions","VisibilityFilterActions","VisibilityFilters","AddTodoItem","connect","dispatch","useState","todoText","setTodoText","Form","onSubmit","event","preventDefault","trim","text","trimmedText","type","payload","addTodoItem","Row","InputGroup","size","className","FormControl","placeholder","aria-label","aria-describedby","value","onChange","target","Append","Button","variant","TodoItemComponent","state","isEditable","updateTodoText","bind","toggleIsEditable","handleSubmit","this","setState","props","update","id","completed","Card","style","height","OverlayTrigger","placement","overlay","Tooltip","onClick","textDecoration","border","background","disabled","remove","done","Component","TodoItem","editTodoItem","removeTodoItem","markTodoItemCompleted","PaginationComponent","pager","items","length","setPage","initialPage","prevProps","prevState","page","pageSize","pagerTemp","getPager","pageOfItems","slice","startIndex","endIndex","onChangePage","totalItems","currentPage","startPage","endPage","totalPages","Math","ceil","min","pages","Array","keys","map","i","Pagination","First","Prev","index","Item","key","Next","Last","defaultProps","TodoItemListComponent","todos","Col","todo","textAlign","getVisibleTodos","filter","Error","TodoItemList","visibilityFilter","LinkComponent","active","children","marginLeft","FilterLink","ownProps","FooterComponent","App","Container","fontWeight","sm","paddingBottom","Boolean","window","location","hostname","match","todosReducer","action","Object","assign","todoTemp","console","log","visibilityFilterReducer","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15466706.chunk.js","sourcesContent":["export const TodoActions = {\n    ADD_ITEM: 'ADD_TODO_ITEM',\n    REMOVE_ITEM: 'REMOVE_TODO_ITEM',\n    EDIT_ITEM: 'EDIT_TODO_ITEM',\n    TODO_COMPLETED: 'TODO_COMPLETED',\n    TOGGLE_TODO: 'TOGGLE_TODO'\n}\n\nexport const VisibilityFilterActions = {\n    SET_VISIBILITY_FILTER: 'SET_VISIBILITY_FILTER'\n}\n\nexport const VisibilityFilters = {\n    SHOW_ALL: 'SHOW_ALL',\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n","import { connect } from 'react-redux';\nimport { AddTodoItemComponent } from '../components/AddTodoItemComponent';\n\nconst AddTodoItem = connect()(AddTodoItemComponent);\nexport default AddTodoItem;","import React, { useState } from 'react';\nimport { addTodoItem } from '../actions/TodoActions';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\n\nexport const AddTodoItemComponent = ({ dispatch }) => {\n\n    const [todoText, setTodoText] = useState(\"\");\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (!todoText.trim()) {\n            //console.log('Empty value')\n            return\n        }\n        //console.log(`Submitting todoText ${todoText}`);\n        dispatch(addTodoItem(todoText));\n        setTodoText('');\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Row>\n                <InputGroup size=\"lg\" className=\"mb-3\">\n                    <FormControl\n                        placeholder=\"Enter to-do task\"\n                        aria-label=\"Enter to-do task\"\n                        aria-describedby=\"basic-addon2\"\n                        type=\"text\"\n                        value={todoText}\n                        onChange={event => setTodoText(event.target.value)}\n                    />\n                    <InputGroup.Append>\n                        <Button type=\"submit\" variant=\"outline-secondary\">Add Task</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Form.Row>\n        </Form>\n    );\n}","import { TodoActions, VisibilityFilterActions } from '../constants/TodoConstant';\n\n//action to add new item in todo list\nexport const addTodoItem = (text) => {\n    let trimmedText = text.trim();\n    //console.log(`${trimmedText} in action`)\n    return {\n        type: TodoActions.ADD_ITEM,\n        payload: trimmedText\n    }\n}\n\n//action to edit the item in todo list\nexport const editTodoItem = (id, text) => {\n    return {\n        type: TodoActions.EDIT_ITEM,\n        payload: {\n            id: id,\n            text: text\n        }\n    }\n}\n\n//action to remove the item from todo list\nexport const removeTodoItem = (id) => (\n    {\n        type: TodoActions.REMOVE_ITEM,\n        payload: id\n    }\n)\n\n//action to remove the item from todo list\nexport const markTodoItemCompleted = (id) => (\n    {\n        type: TodoActions.TODO_COMPLETED,\n        payload: id\n    }\n)\n\nexport const toggleTodo = id => ({\n    type: TodoActions.TOGGLE_TODO,\n    id\n})\n\nexport const setVisibilityFilter = filter => ({\n    type: VisibilityFilterActions.SET_VISIBILITY_FILTER,\n    filter\n})\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\nexport default class TodoItemComponent extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            isEditable: false,\n            updateTodoText: 'Default'\n        }\n        this.setTodoText = this.setTodoText.bind(this);\n        this.toggleIsEditable = this.toggleIsEditable.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    setTodoText(event) {\n        this.setState({\n            updateTodoText: event.target.value\n        });\n    }\n\n    toggleIsEditable() {\n        this.setState({\n            isEditable: !this.state.isEditable\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (!this.state.updateTodoText.trim()) {\n            //console.log('Empty value');\n            return\n        } else if (this.state.updateTodoText === 'Default') {\n            this.setState({\n                isEditable: false\n            })\n            return\n        } else {\n            //console.log(`Submitting todoText ${this.state.updateTodoText}`);\n            this.props.update(this.props.id, this.state.updateTodoText);\n            this.setState({\n                isEditable: false\n            })\n        }\n    }\n\n    render() {\n        let { isEditable } = this.state;\n        let { id, text, completed } = this.props;\n\n        return (\n            <Card>\n                {!isEditable ? (\n                    <InputGroup size=\"lg\">\n                        <FormControl\n                            aria-describedby=\"basic-addon2\"\n                            style={{\n                                textDecoration: completed ? 'line-through' : 'none',\n                                border: 'none',\n                                background: 'none',\n                                height: '46px'\n                            }}\n                            value={text}\n                            disabled\n                        />\n                        <InputGroup.Append>\n                            <OverlayTrigger placement=\"bottom\"\n                                overlay={\n                                    <Tooltip>\n                                        <strong>Edit</strong>.\n                                                </Tooltip>\n                                }\n                            >\n                                <Button variant=\"outline-secondary\" onClick={this.toggleIsEditable}>\n                                    <i className=\"material-icons\">create</i>\n                                </Button>\n                            </OverlayTrigger>\n                            <OverlayTrigger placement=\"bottom\"\n                                overlay={\n                                    <Tooltip>\n                                        <strong>Delete</strong>.\n                                    </Tooltip>\n                                }\n                            >\n                                <Button variant=\"outline-secondary\" onClick={event => this.props.remove(id)}>\n                                    <i className=\"material-icons\">delete</i>\n                                </Button>\n                            </OverlayTrigger>\n                            <OverlayTrigger placement=\"bottom\"\n                                overlay={\n                                    <Tooltip>\n                                        <strong>{completed ? 'Mark Active' : 'Mark Completed'}</strong>.\n                                    </Tooltip>\n                                }\n                            >\n                                <Button variant=\"outline-secondary\" onClick={event => this.props.done(id)}>\n                                    {\n                                        completed ? (<i className=\"material-icons\" >cancel</i>) : (<i className=\"material-icons\" >done</i>)\n                                    }\n                                </Button>\n                            </OverlayTrigger>\n                        </InputGroup.Append>\n                    </InputGroup>\n                ) : (\n                        <Form onSubmit={this.handleSubmit}>\n                            <Form.Row>\n                                <InputGroup size=\"lg\">\n                                    <FormControl\n                                        placeholder=\"Recipient's username\"\n                                        aria-label=\"Recipient's username\"\n                                        aria-describedby=\"basic-addon2\"\n                                        type=\"text\"\n                                        value={this.state.updateTodoText === 'Default' ? text : this.state.updateTodoText}\n                                        onChange={this.setTodoText}\n                                        style={{ height: '46px' }}\n                                    />\n                                    <InputGroup.Append>\n                                        <OverlayTrigger placement=\"bottom\"\n                                            overlay={\n                                                <Tooltip>\n                                                    <strong>Update</strong>.\n                                                </Tooltip>\n                                            }\n                                        >\n                                            <Button type=\"submit\" variant=\"outline-secondary\">\n                                                <i className=\"material-icons\">done</i>\n                                            </Button>\n                                        </OverlayTrigger>\n                                        <OverlayTrigger placement=\"bottom\"\n                                            overlay={\n                                                <Tooltip>\n                                                    <strong>Cancel</strong>.\n                                                </Tooltip>\n                                            }\n                                        >\n                                            <Button variant=\"outline-secondary\" onClick={this.toggleIsEditable} >\n                                                <i className=\"material-icons\">cancel</i>\n                                            </Button>\n                                        </OverlayTrigger>\n\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Form.Row>\n                        </Form>\n                    )\n                }\n\n            </Card>\n        )\n    }\n}\n\nTodoItemComponent.propTypes = {\n    id: PropTypes.number.isRequired,\n    text: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired\n}\n","import { connect } from 'react-redux';\nimport { editTodoItem, removeTodoItem, markTodoItemCompleted } from '../actions/TodoActions';\nimport TodoItemComponent from '../components/TodoItemComponent';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        update: (id, text) => dispatch(editTodoItem(id, text)),\n        remove: (id) => dispatch(removeTodoItem(id)),\n        done: (id) => dispatch(markTodoItemCompleted(id))\n    }\n}\n\nconst TodoItem = connect(null, mapDispatchToProps)(TodoItemComponent);\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Pagination from 'react-bootstrap/Pagination';\n\nclass PaginationComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { pager: {} };\n    }\n\n    componentWillMount() {\n        // set page if items array isn't empty\n        if (this.props.items && this.props.items.length) {\n            this.setPage(this.props.initialPage);\n        }\n\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // reset page if items array has changed\n        if (this.props.items !== prevProps.items) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    setPage(page) {\n\n        let { items, pageSize } = this.props;\n\n        //console.log(`setPage: ${JSON.stringify(page)} ${pager.totalPages}`)\n        if (page < 1) {\n            return;\n        }\n\n        // get new pager object for specified page\n        let pagerTemp = this.getPager(items.length, page, pageSize);\n\n        // get new page of items from items array\n        let pageOfItems = items.slice(pagerTemp.startIndex, pagerTemp.endIndex + 1);\n\n        // update state\n        this.setState({ pager: pagerTemp });\n\n        // call change page function in parent component\n        this.props.onChangePage(pageOfItems);\n    }\n\n    getPager(totalItems, currentPage, pageSize) {\n        // default to first page\n        currentPage = currentPage || 1;\n\n        // default page size is 10\n        pageSize = pageSize || 10;\n\n        // calculate total pages\n        var totalPages = Math.ceil(totalItems / pageSize);\n\n        var startPage, endPage;\n        if (totalPages <= 10) {\n            // less than 10 total pages so show all\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // more than 10 total pages so calculate start and end pages\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n\n        // calculate start and end item indexes\n        var startIndex = (currentPage - 1) * pageSize;\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n        // create an array of pages to ng-repeat in the pager control\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n\n        // return object with all pager properties required by the view\n        return {\n            totalItems: totalItems,\n            currentPage: currentPage,\n            pageSize: pageSize,\n            totalPages: totalPages,\n            startPage: startPage,\n            endPage: endPage,\n            startIndex: startIndex,\n            endIndex: endIndex,\n            pages: pages\n        };\n    }\n\n    render() {\n        var pager = this.state.pager;\n\n        if (!pager.pages || pager.pages.length <= 1) {\n            // don't display pager if there is only 1 page\n            return null;\n        }\n\n        return (\n            <Pagination size=\"lg\">\n                <Pagination.First className={pager.currentPage === 1 ? 'disabled' : ''} onClick={() => this.setPage(1)} />\n                <Pagination.Prev className={pager.currentPage === 1 ? 'disabled' : ''} onClick={() => this.setPage(pager.currentPage - 1)} />\n                {pager.pages.map((page, index) =>\n                    <Pagination.Item key={index} className={pager.currentPage === page ? 'active' : ''} onClick={() => this.setPage(page)}>{page}</Pagination.Item>\n                )}\n                <Pagination.Next className={pager.currentPage === pager.totalPages ? 'disabled' : ''} onClick={() => this.setPage(pager.currentPage + 1)} />\n                <Pagination.Last className={pager.currentPage === pager.totalPages ? 'disabled' : ''} onClick={() => this.setPage(pager.totalPages)} />\n            </Pagination>\n\n        );\n    }\n}\nconst propTypes = {\n    items: PropTypes.array.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n    initialPage: PropTypes.number,\n    pageSize: PropTypes.number\n}\n\nconst defaultProps = {\n    initialPage: 1,\n    pageSize: 5\n}\n\nPaginationComponent.propTypes = propTypes;\nPaginationComponent.defaultProps = defaultProps;\nexport default PaginationComponent;","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport TodoItem from '../containers/TodoItem';\nimport PaginationComponent from './PaginationComponent';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass TodoItemListComponent extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            pageOfItems: []\n        };\n        this.onChangePage = this.onChangePage.bind(this);\n    }\n\n    componentDidMount() {\n        if (this.props.todos.length !== 0 && this.state.pageOfItems.length === 0) {\n            this.setState({\n                pageOfItems: []\n            })\n        }\n    }\n\n    onChangePage(pageOfItems) {\n        // update state with new page of items\n        this.setState({ pageOfItems: pageOfItems });\n    }\n\n    render() {\n        return (\n            <>\n                <Row style={{ height: '366px' }}>\n                    <Col>\n                        {\n                            this.state.pageOfItems.map((todo, index) => {\n                                return (\n                                    <TodoItem key={index + 1} {...todo} />\n                                )\n                            })\n                        }\n                    </Col>\n                </Row>\n                <Row className=\"justify-content-md-center\">\n                    <Col style={{ textAlign: 'center' }}>\n                        <PaginationComponent items={this.props.todos} onChangePage={this.onChangePage} />\n                    </Col>\n                </Row>\n            </>\n        )\n    }\n\n}\n\n\nTodoItemListComponent.propTypes = {\n    todos: propTypes.arrayOf(\n        propTypes.shape({\n            id: propTypes.number.isRequired,\n            completed: propTypes.bool.isRequired,\n            text: propTypes.string.isRequired\n        }).isRequired\n    )\n}\n\nexport default TodoItemListComponent;","import { connect } from 'react-redux';\nimport TodoItemListComponent from \"../components/TodoItemListComponent\"\nimport { VisibilityFilters } from '../constants/TodoConstant';\n\nconst getVisibleTodos = (todos, filter) => {\n    //console.log(`inside method:(${filter}) ${JSON.stringify(todos)}`);\n    switch (filter) {\n        case VisibilityFilters.SHOW_ALL:\n            return todos;\n        case VisibilityFilters.SHOW_COMPLETED:\n            return todos.filter(todo => todo.completed);\n        case VisibilityFilters.SHOW_ACTIVE:\n            return todos.filter(todo => !todo.completed);\n        default:\n            throw new Error('Unknown filter: ' + filter)\n    }\n}\n\nconst mapStateToProps = (state) => {\n    //console.log(`before method: -- ${JSON.stringify(state)}`);\n    return ({\n        todos: getVisibleTodos(state.todos, state.visibilityFilter)\n    })\n}\n\nconst TodoItemList = connect(mapStateToProps)(TodoItemListComponent);\nexport default TodoItemList;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button'\n\nconst LinkComponent = ({ active, children, onClick }) => (\n    <Button\n        onClick={onClick}\n        disabled={active}\n        style={{\n            marginLeft: '4px',\n        }}\n        size=\"lg\"\n    >\n        {children}\n    </Button>\n)\n\nLinkComponent.propTypes = {\n    active: PropTypes.bool.isRequired,\n    children: PropTypes.node.isRequired,\n    onClick: PropTypes.func.isRequired\n}\n\nexport default LinkComponent;","import { connect } from 'react-redux';\nimport LinkComponent from '../components/LinkComponent';\nimport { setVisibilityFilter } from '../actions/TodoActions';\n\nconst mapStateToProps = (state, ownProps) => ({\n    active: ownProps.filter === state.visibilityFilter\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n})\n\nconst FilterLink = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LinkComponent);\n\nexport default FilterLink;","import React from 'react';\nimport FilterLink from '../containers/FilterLink';\nimport { VisibilityFilters } from '../constants/TodoConstant';\n\n\nconst FooterComponent = () => (\n    <div>\n        <span>Filter: </span>\n        <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n        <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n)\n\nexport default FooterComponent;\n\n/*\n<ToggleButtonGroup type=\"checkbox\" defaultValue={[1, 3]} className=\"mb-2\">\n            <ToggleButton  value={1}>\n                <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n            </ToggleButton>\n            <ToggleButton  value={2}>\n                <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n            </ToggleButton>\n            <ToggleButton  value={3}>\n                <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n            </ToggleButton>\n        </ToggleButtonGroup>\n*/","import React from 'react';\nimport './App.css';\nimport AddTodoItem from './containers/AddTodoItem';\nimport TodoItemList from './containers/TodoItemList';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FooterComponent from './template/FilterLinkTemplate';\n\nfunction App() {\n  let title = \"Todo Application - {React, Redux, React-Bootstrap}\";\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <h3 style={{ fontWeight: 'bolder' }}>{title}</h3>\n          <h5>Developed by Manoj Pawar</h5>\n          <hr></hr>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={6}>\n          <AddTodoItem />\n          <h5 style={{ paddingBottom: '12px', fontWeight: 'bolder' }}>Your To-do item list</h5>\n          <TodoItemList />\n        </Col>\n        <Col sm={6}></Col>\n      </Row>\n      <Row>\n        <Col>\n          <FooterComponent />\n        </Col>\n      </Row>\n    </Container >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TodoActions } from \"../constants/TodoConstant\";\n\nconst todosReducer = (state = [], action) => {\n    switch (action.type) {\n        case TodoActions.ADD_ITEM:\n            //console.log(`test -> ${action.type} : ${action.payload}`);\n            return [\n                ...state,\n                Object.assign({},\n                    {\n                        id: state.length + 1,\n                        text: action.payload,\n                        completed: false\n\n                    })\n            ];\n\n        case TodoActions.EDIT_ITEM:\n            // console.log(`${action.type} : ${action.payload.id} : ${action.payload.text}`);\n            return state.map(todo => {\n                //console.log(`map: ${todo.id} = ${action.payload.id}`)\n                if (todo.id === action.payload.id) {\n                    let todoTemp = {\n                        id: action.payload.id,\n                        text: action.payload.text,\n                        completed: todo.completed\n                    };\n                    console.log(todoTemp);\n                    return todoTemp\n                } else {\n                    return todo\n                }\n            });\n\n\n        case TodoActions.REMOVE_ITEM:\n            //console.log(`${action.type} : ${action.payload}`);\n            return state.filter(todo => todo.id !== action.payload)\n                .map(\n                    (todo, index) => (\n                        {\n                            id: index + 1,\n                            text: todo.text,\n                            completed: todo.completed\n                        }\n                    )\n                );\n\n        case TodoActions.TODO_COMPLETED:\n            //console.log(`${action.type} : ${action.payload}`);\n            return state.map(todo => {\n                if (todo.id === action.payload) {\n                    return {\n                        id: todo.id,\n                        text: todo.text,\n                        completed: !todo.completed\n                    }\n                } else {\n                    return todo\n                }\n            })\n\n        case TodoActions.TOGGLE_TODO:\n            return state.map(todo =>\n                (todo.id === action.id)\n                    ? { ...todo, completed: !todo.completed }\n                    : todo\n            )\n\n        default:\n            return state;\n    }\n\n}\n\nexport default todosReducer;","import { VisibilityFilters, VisibilityFilterActions } from \"../constants/TodoConstant\";\n\n\nconst visibilityFilterReducer = (state = VisibilityFilters.SHOW_ALL, action) => {\n    switch (action.type) {\n        case VisibilityFilterActions.SET_VISIBILITY_FILTER:\n            return action.filter\n        default:\n            return state\n    }\n}\n\nexport default visibilityFilterReducer;","import { combineReducers } from 'redux';\nimport todosReducer from './todosReducer'\nimport visibilityFilterReducer from './visibilityFilterReducer';\n\nexport default combineReducers({\n    todos: todosReducer,\n    visibilityFilter: visibilityFilterReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}